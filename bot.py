import os
import logging
from datetime import datetime
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –Ω–∞ Render)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω ExpressPay
APP_URL = os.getenv("APP_URL")      # URL Render-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://my-bot.onrender.com

EXPRESS_URL = "https://api.express-pay.by/v1/invoices"

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_AMOUNT = 1
ASK_INVOICE_NO = 2


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç"), KeyboardButton("üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ExpressPay.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


# ---------- 1. –í–´–°–¢–ê–í–õ–ï–ù–ò–ï –°–ß–Å–¢–ê ----------

async def invoice_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.50):")
    return ASK_AMOUNT


async def create_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text.strip().replace(".", ",")  # API —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—è—Ç—É—é
    date_str = datetime.now().strftime("%d%m%y")
    order_no = "001"  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    account_no = f"{date_str}{order_no}"

    payload = {
        "AccountNo": account_no,
        "Amount": amount,
        "Currency": 933,
        "Info": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
    }

    url = f"{EXPRESS_URL}?token={API_TOKEN}"
    response = requests.post(url, data=payload)

    if response.status_code == 200:
        invoice_no = response.json().get("InvoiceNo")
        await update.message.reply_text(
            f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!\n\n"
            f"üî∏ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞ –≤ ExpressPay: {invoice_no}\n"
            f"üîπ –í–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (AccountNo): {account_no}"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞.\n–ö–æ–¥: {response.status_code}\n–¢–µ–∫—Å—Ç: {response.text}"
        )

    return ConversationHandler.END


# ---------- 2. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ß–Å–¢–ê ----------

async def status_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (InvoiceNo):")
    return ASK_INVOICE_NO


async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    invoice_no = update.message.text.strip()
    url = f"{EXPRESS_URL}/{invoice_no}/status?token={API_TOKEN}"

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        status_code = data.get("Status")

        statuses = {
            1: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É",
            2: "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω",
            3: "‚úÖ –û–ø–ª–∞—á–µ–Ω",
            4: "üíµ –û–ø–ª–∞—á–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
            5: "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
            6: "üí≥ –û–ø–ª–∞—á–µ–Ω –∫–∞—Ä—Ç–æ–π",
            7: "‚Ü©Ô∏è –ü–ª–∞—Ç—ë–∂ –≤–æ–∑–≤—Ä–∞—â—ë–Ω"
        }

        status_text = statuses.get(status_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞ ‚Ññ{invoice_no}: {status_text}")
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n–ö–æ–¥: {response.status_code}\n–¢–µ–∫—Å—Ç: {response.text}"
        )

    return ConversationHandler.END


# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ú–ï–ù–´ ----------

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# ---------- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ----------

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–∏–∞–ª–æ–≥: –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    invoice_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("(^üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç$)"), invoice_start)],
        states={ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_invoice)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–∏–∞–ª–æ–≥: —Å—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞
    status_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("(^üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞$)"), status_start)],
        states={ASK_INVOICE_NO: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_status)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(invoice_conv)
    app.add_handler(status_conv)

    # ‚úÖ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook (–¥–ª—è Render)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8443)),
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}"
    )


if __name__ == "__main__":
    main()
