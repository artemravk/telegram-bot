import os
import json
import hmac
import hashlib
import logging
from datetime import datetime
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
EXPRESS_PAY_TOKEN = os.getenv("EXPRESSPAY_TOKEN")
EXPRESS_PAY_SECRET = os.getenv("EXPRESSPAY_SECRET")
APP_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("APP_URL")  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É —Ç–µ–±—è –±—ã–ª–∞ app_url

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print("BOT_TOKEN:", "‚úÖ –Ω–∞–π–¥–µ–Ω" if BOT_TOKEN else "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
print("EXPRESSPAY_TOKEN:", "‚úÖ –Ω–∞–π–¥–µ–Ω" if EXPRESS_PAY_TOKEN else "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
print("EXPRESSPAY_SECRET:", "‚úÖ –Ω–∞–π–¥–µ–Ω" if EXPRESS_PAY_SECRET else "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
print("APP_URL:", APP_URL or "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

if not BOT_TOKEN or not EXPRESS_PAY_TOKEN:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ EXPRESSPAY_TOKEN")



# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_state = {}
current_account_number = 1


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="create_invoice")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="check_status")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_invoice":
        user_state[query.from_user.id] = "creating_invoice"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (BYN):")

    elif query.data == "check_status":
        user_state[query.from_user.id] = "checking_status"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: 35077-1-XXXXXXX)")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    action = user_state.get(user_id)

    global current_account_number

    if action == "creating_invoice":
        try:
            amount = float(update.message.text.strip().replace(",", "."))
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return

        account_no = f"301025{current_account_number:03d}"
        current_account_number += 1

        payload = {
            "Token": EXPRESSPAY_TOKEN,
            "AccountNo": account_no,
            "Amount": amount,
            "Currency": 933,
        }

        response = requests.post(EXPRESSPAY_URL, data=payload)
        data = response.json()

        invoice_no = data.get("InvoiceNo")
        if invoice_no:
            msg = (
                f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üí≥ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: `35077-1-{account_no}`\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} BYN\n\n"
                f"–ù–æ–º–µ—Ä –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é."
            )
            await update.message.reply_text(msg, parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")

    elif action == "checking_status":
        user_input = update.message.text.strip()
        if "-" in user_input:
            account_no = user_input.split("-")[-1]
        else:
            account_no = user_input

        params = {"Token": EXPRESSPAY_TOKEN, "AccountNo": account_no}
        resp = requests.get(EXPRESSPAY_URL, params=params)
        raw_json = resp.json()

        items = raw_json.get("Items", [])
        if not items:
            await update.message.reply_text("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        invoice = items[-1]
        created_raw = invoice.get("Created")
        created_date = datetime.strptime(created_raw, "%Y%m%d%H%M%S").strftime("%d.%m.%Y %H:%M:%S")
        status = invoice.get("Status")

        status_text = {
            1: "üïì –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            2: "‚úÖ –û–ø–ª–∞—á–µ–Ω",
            3: "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
        }.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        msg = (
            f"üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞\n\n"
            f"–ù–æ–º–µ—Ä: 35077-1-{invoice.get('AccountNo')}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°—É–º–º–∞: {invoice.get('Amount')} BYN\n"
            f"–î–∞—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {created_date}"
        )

        await update.message.reply_text(msg)

    user_state[user_id] = None


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ExpressPay ===
async def expresspay_notification(request):
    try:
        data = await request.post()
        json_data = data.get("Data")
        signature = data.get("Signature")

        if not json_data:
            return web.Response(status=400, text="Missing Data")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if EXPRESSPAY_SECRET:
            computed = hmac.new(
                EXPRESSPAY_SECRET.encode(),
                msg=json_data.encode(),
                digestmod=hashlib.sha1
            ).hexdigest().upper()
            if computed != signature:
                logger.warning("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return web.Response(status=403, text="Invalid signature")

        payment_info = json.loads(json_data)
        logger.info(f"‚úÖ –ü–æ—Å—Ç—É–ø–∏–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ: {payment_info}")

        return web.Response(status=200, text="OK")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return web.Response(status=500, text="Server error")


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º HTTP endpoint –¥–ª—è ExpressPay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    from aiohttp import web
    web_app = web.Application()
    web_app.router.add_post("/expresspay_notify", expresspay_notification)

    # –ó–∞–ø—É—Å–∫ Telegram webhook + HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=BOT_TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_URL', 'yourapp.onrender.com')}/{BOT_TOKEN}",
    )

    web.run_app(web_app, host="0.0.0.0", port=8080)


if __name__ == "__main__":
    main()
