import os
import logging
import requests
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_TOKEN = os.getenv("EXPRESSPAY_TOKEN")
APP_URL = os.getenv("RENDER_EXTERNAL_URL")

if not BOT_TOKEN or not API_TOKEN:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ EXPRESSPAY_TOKEN")

# Render –∏–Ω–æ–≥–¥–∞ –Ω–µ –∑–∞–¥–∞—ë—Ç URL —Å—Ä–∞–∑—É ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è:
if not APP_URL:
    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL-–∑–∞–≥–ª—É—à–∫–∞.")
    APP_URL = "https://example.com"

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def create_invoice(amount: str):
    """–°–æ–∑–¥–∞—ë—Ç —Å—á—ë—Ç —á–µ—Ä–µ–∑ ExpressPay API."""
    try:
        account_no = datetime.now().strftime("%d%m%y") + "001"
        payload = {
            "AccountNo": account_no,
            "Amount": amount.replace(".", ","),
            "Currency": 933,
            "Info": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
        }

        url = f"https://api.express-pay.by/v1/invoices?token={API_TOKEN}"
        response = requests.post(url, json=payload)

        if response.status_code == 200:
            data = response.json()
            invoice_no = data.get("InvoiceNo", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            return f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.\n–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: {invoice_no}\n–í–∞—à AccountNo: {account_no}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞.\n–ö–æ–¥: {response.status_code}\n–¢–µ–∫—Å—Ç: {response.text}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: {e}"

def get_invoice_status(invoice_no: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞."""
    try:
        url = f"https://api.express-pay.by/v1/invoices/{invoice_no}/status?token={API_TOKEN}"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            status_map = {
                1: "üïì –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É",
                2: "‚åõ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω",
                3: "‚úÖ –û–ø–ª–∞—á–µ–Ω",
                4: "üí∞ –û–ø–ª–∞—á–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
                5: "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
                6: "üí≥ –û–ø–ª–∞—á–µ–Ω –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π",
                7: "‚Ü©Ô∏è –ü–ª–∞—Ç–µ–∂ –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
            }
            status = data.get("Status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            return f"üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞ ‚Ññ{invoice_no}: {status_map.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n–ö–æ–¥: {response.status_code}\n–¢–µ–∫—Å—Ç: {response.text}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç")],
        [KeyboardButton("–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–≤ BYN):")
        context.user_data["awaiting_amount"] = True
    elif context.user_data.get("awaiting_amount"):
        context.user_data["awaiting_amount"] = False
        result = create_invoice(text)
        await update.message.reply_text(result)
    elif text == "–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (InvoiceNo):")
        context.user_data["awaiting_invoice"] = True
    elif context.user_data.get("awaiting_invoice"):
        context.user_data["awaiting_invoice"] = False
        result = get_invoice_status(text)
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é.")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ webhook ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è Render
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}"
    )

if __name__ == "__main__":
    main()
