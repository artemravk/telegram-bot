import os
import hmac
import hashlib
import json
import requests
from datetime import datetime
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
EXPRESS_PAY_TOKEN = os.getenv("EXPRESS_PAY_TOKEN")
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
SECRET_WORD = os.getenv("SECRET_WORD", "")  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ ExpressPay
API_URL = "https://api.express-pay.by/v1/invoices"
ACCOUNT_FILE = "account_no.txt"

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="create_invoice")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="check_status")]
    ])

# === –°—á—ë—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–æ–≤ AccountNo ===
def get_next_account_no():
    today = datetime.now().strftime("%d%m%y")
    if os.path.exists(ACCOUNT_FILE):
        with open(ACCOUNT_FILE, "r") as f:
            data = f.read().strip()
    else:
        data = ""

    if not data.startswith(today):
        next_no = 1
    else:
        last_no = int(data[6:])
        next_no = last_no + 1

    new_account_no = f"{today}{next_no:03d}"
    with open(ACCOUNT_FILE, "w") as f:
        f.write(new_account_no)
    return new_account_no

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –ö–Ω–æ–ø–∫–∏ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    elif query.data == "create_invoice":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25,50):")
        context.user_data["action"] = "create_invoice"
    elif query.data == "check_status":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 35077-1-XXXXXX:")
        context.user_data["action"] = "check_status"

# === –î–µ—Ç–∞–ª–∏ —Å—á—ë—Ç–∞ ===
def get_invoice_details(invoice_no: int):
    url = f"{API_URL}/{invoice_no}?token={EXPRESS_PAY_TOKEN}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = context.user_data.get("action")

    if action == "create_invoice":
        amount = update.message.text.strip().replace(",", ".")
        account_no = get_next_account_no()
        data = {
            "Token": EXPRESS_PAY_TOKEN,
            "AccountNo": account_no,
            "Amount": amount,
            "Currency": 933,
            "Info": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
        }
        response = requests.post(f"{API_URL}?token={EXPRESS_PAY_TOKEN}", data=data)
        if response.status_code == 200:
            invoice_no = response.json().get("InvoiceNo")
            details = get_invoice_details(invoice_no)
            if details:
                amount_info = details.get("Amount")
                account_info = details.get("AccountNo")
                account_display = f"35077-1-{account_info}"
                await update.message.reply_text(
                    f"‚úÖ –°—á—ë—Ç –Ω–∞ {amount_info} —Ä—É–±–ª–µ–π –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.\n"
                    f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: `{account_display}`",
                    parse_mode="Markdown",
                    reply_markup=main_menu()
                )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n{response.text}", reply_markup=main_menu())
        context.user_data.clear()

    elif action == "check_status":
        acc_input = update.message.text.strip()
        if acc_input.startswith("35077-1-"):
            acc_no = acc_input.split("-1-")[1]
        else:
            acc_no = acc_input

        url = f"{API_URL}?token={EXPRESS_PAY_TOKEN}&AccountNo={acc_no}"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json().get("Items", [])
            if not data:
                await update.message.reply_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
                return
            invoice = data[-1]
            statuses = {
                1: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É",
                2: "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω",
                3: "–û–ø–ª–∞—á–µ–Ω",
                4: "–û–ø–ª–∞—á–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
                5: "–û—Ç–º–µ–Ω–µ–Ω",
                6: "–û–ø–ª–∞—á–µ–Ω –∫–∞—Ä—Ç–æ–π",
                7: "–ü–ª–∞—Ç—ë–∂ –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
            }
            await update.message.reply_text(
                f"üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞\n\n"
                f"–ù–æ–º–µ—Ä: `35077-1-{acc_no}`\n"
                f"–°—Ç–∞—Ç—É—Å: {statuses.get(invoice.get('Status'), '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"–°—É–º–º–∞: {invoice.get('Amount')} BYN\n"
                f"–î–∞—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {invoice.get('Created')}",
                parse_mode="Markdown",
                reply_markup=main_menu()
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n{response.text}", reply_markup=main_menu())
        context.user_data.clear()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ExpressPay ===
def verify_signature(data: str, signature: str) -> bool:
    expected = hmac.new(SECRET_WORD.encode(), data.encode(), hashlib.sha1).hexdigest().upper()
    return hmac.compare_digest(signature.upper(), expected)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç ExpressPay ===
async def expresspay_notification(request):
    try:
        data = request.post()
        data = await data
        json_data = data.get("Data")
        signature = data.get("Signature", "")

        if not json_data:
            return web.Response(text="Missing Data", status=400)

        if SECRET_WORD:
            if not verify_signature(json_data, signature):
                return web.Response(text="Invalid signature", status=403)

        payment = json.loads(json_data)
        print("‚úÖ –ü–æ—Å—Ç—É–ø–∏–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ:", payment)

        return web.Response(text="OK", status=200)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)
        return web.Response(text="Error", status=500)

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # === aiohttp web app –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
    web_app = web.Application()
    web_app.router.add_post("/expresspay_notify", expresspay_notification)

    # Telegram webhook
    port = int(os.environ.get("PORT", 8443))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}",
    )

    # ExpressPay webhook
    web.run_app(web_app, host="0.0.0.0", port=8080)

if __name__ == "__main__":
    main()
