import os
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
EXPRESS_PAY_TOKEN = os.getenv("EXPRESS_PAY_TOKEN")
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
API_URL = "https://api.express-pay.by/v1/invoices"
ACCOUNT_FILE = "account_no.txt"


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="create_invoice")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="check_status")]
    ])


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AccountNo ===
def get_next_account_no():
    today = datetime.now().strftime("%d%m%y")

    if os.path.exists(ACCOUNT_FILE):
        with open(ACCOUNT_FILE, "r") as f:
            data = f.read().strip()
    else:
        data = ""

    if not data.startswith(today):
        next_no = 1
    else:
        last_no = int(data[6:])
        next_no = last_no + 1

    new_account_no = f"{today}{next_no:03d}"

    with open(ACCOUNT_FILE, "w") as f:
        f.write(new_account_no)

    return new_account_no


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

    elif query.data == "create_invoice":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25,50):")
        context.user_data["action"] = "create_invoice"

    elif query.data == "check_status":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:")
        context.user_data["action"] = "check_status"


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å—á—ë—Ç–∞ ===
def get_invoice_details(invoice_no: int):
    url = f"{API_URL}/{invoice_no}?token={EXPRESS_PAY_TOKEN}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤ –ø–æ AccountNo ===
def get_invoice_list(token: str, account_no: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø–æ AccountNo (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ From)."""
    params = {
        "Token": token,
        "AccountNo": account_no
    }

    response = requests.get(API_URL, params=params)
    raw_text = response.text  # –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API

    try:
        data = response.json()
    except Exception:
        data = {"error": f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {raw_text}"}

    return data, raw_text


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = context.user_data.get("action")

    if action == "create_invoice":
        amount = update.message.text.strip().replace(",", ".")
        account_no = get_next_account_no()

        data = {
            "Token": EXPRESS_PAY_TOKEN,
            "AccountNo": account_no,
            "Amount": amount,
            "Currency": 933,
            "Info": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
        }

        response = requests.post(f"{API_URL}?token={EXPRESS_PAY_TOKEN}", data=data)
        if response.status_code == 200:
            invoice_no = response.json().get("InvoiceNo")
            details = get_invoice_details(invoice_no)
            if details:
                amount_info = details.get("Amount")
                account_info = details.get("AccountNo")
                account_display = f"35077-1-{account_info}"

                await update.message.reply_text(
                    f"‚úÖ –°—á—ë—Ç –Ω–∞ {amount_info} —Ä—É–±–ª–µ–π –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.\n"
                    f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: `{account_display}`",
                    parse_mode="Markdown",
                    reply_markup=main_menu()
                )
            else:
                await update.message.reply_text(
                    f"‚úÖ –°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏.\n"
                    f"InvoiceNo: {invoice_no}",
                    reply_markup=main_menu()
                )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞:\n{response.text}",
                reply_markup=main_menu()
            )

        context.user_data.clear()

    elif action == "check_status":
        account_display = update.message.text.strip()

        if "-" in account_display:
            account_no = account_display.split("-")[-1].strip()
        else:
            account_no = account_display.strip()

        data, raw = get_invoice_list(EXPRESS_PAY_TOKEN, account_no)

        # üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await update.message.reply_text(
            f"üßæ *–û—Ç–≤–µ—Ç ExpressPay (—Å—ã—Ä–æ–π)*:\n```\n{raw[:3000]}\n```",
            parse_mode="Markdown"
        )

        if "Error" in data:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç ExpressPay:\n{data['Error']['Msg']}",
                reply_markup=main_menu()
            )
            return

        items = data.get("Items", [])
        if not items:
            await update.message.reply_text(
                f"‚ùå –°—á—ë—Ç `{account_display}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="Markdown",
                reply_markup=main_menu()
            )
            return

        # –ë–µ—Ä—ë–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç
        invoice = items[-1]
        status = int(invoice.get("Status", 0))
        amount = invoice.get("Amount", "‚Äî")
        created_raw = invoice.get("Created", "")
        date = (
            datetime.strptime(created_raw, "%Y%m%d%H%M%S").strftime("%d.%m.%Y %H:%M")
            if created_raw else "‚Äî"
        )

        statuses = {
            1: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É",
            2: "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω",
            3: "–û–ø–ª–∞—á–µ–Ω",
            4: "–û–ø–ª–∞—á–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
            5: "–û—Ç–º–µ–Ω–µ–Ω",
            6: "–û–ø–ª–∞—á–µ–Ω –∫–∞—Ä—Ç–æ–π",
            7: "–ü–ª–∞—Ç—ë–∂ –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
        }

        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞*\n\n"
            f"–ù–æ–º–µ—Ä: `{account_display}`\n"
            f"–°—Ç–∞—Ç—É—Å: *{statuses.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}*\n"
            f"–°—É–º–º–∞: {amount} BYN\n"
            f"–î–∞—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {date}",
            parse_mode="Markdown",
            reply_markup=main_menu()
        )

        context.user_data.clear()

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    port = int(os.environ.get("PORT", 8443))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}"
    )


if __name__ == "__main__":
    main()
