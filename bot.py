import os
import hmac
import hashlib
import json
import logging
import requests
from aiohttp import web
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
EXPRESSPAY_TOKEN = os.getenv("EXPRESSPAY_TOKEN")
EXPRESSPAY_SECRET = os.getenv("EXPRESSPAY_SECRET")
APP_URL = os.getenv("APP_URL")

if not BOT_TOKEN or not EXPRESSPAY_TOKEN:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ EXPRESSPAY_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–ù–û–ü–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="create_invoice")],
        [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="check_status")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_invoice":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–≤ BYN):")
        context.user_data["action"] = "create_invoice"

    elif query.data == "check_status":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 35077-1-XXXX):")
        context.user_data["action"] = "check_status"

# === –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = context.user_data.get("action")

    # === –°–û–ó–î–ê–ù–ò–ï –°–ß–Å–¢–ê ===
    if action == "create_invoice":
        amount = update.message.text.strip()
        if not amount.replace(".", "", 1).isdigit():
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.50)")
            return

        account_info = "301025001"  # —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞
        account_no = f"35077-1-{account_info}"

        url = "https://api.express-pay.by/v1/invoices"
        data = {
            "Token": EXPRESSPAY_TOKEN,
            "ServiceId": 35077,
            "AccountNo": account_info,
            "Amount": amount,
            "Currency": 933,
            "Info": "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥",
        }

        response = requests.post(url, data=data)
        resp_json = response.json()
        logger.info(f"Invoice creation response: {resp_json}")

        if "InvoiceNo" in resp_json:
            text = (
                f"‚úÖ –°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!\n\n"
                f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: `35077-1-{account_info}`\n"
                f"–°—É–º–º–∞: {amount} BYN\n\n"
                f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."
            )
        else:
            text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {resp_json}"

        await update.message.reply_text(text, parse_mode="Markdown")
        context.user_data["action"] = None

    # === –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ß–Å–¢–ê ===
    elif action == "check_status":
        account_no = update.message.text.strip()
        if not account_no.startswith("35077-1-"):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á—ë—Ç–∞. –ü—Ä–∏–º–µ—Ä: 35077-1-301025001")
            return

        account_info = account_no.split("-")[-1]

        url = f"https://api.express-pay.by/v1/invoices?Token={EXPRESSPAY_TOKEN}&AccountNo={account_info}"
        response = requests.get(url)
        resp_json = response.json()

        logger.info(f"ExpressPay raw response: {resp_json}")

        if "Items" in resp_json and len(resp_json["Items"]) > 0:
            invoice = resp_json["Items"][-1]
            status_code = invoice.get("Status", 0)
            status_map = {1: "–í—ã—Å—Ç–∞–≤–ª–µ–Ω", 2: "–û–ø–ª–∞—á–µ–Ω", 3: "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω", 4: "–û—Ç–º–µ–Ω—ë–Ω"}
            status = status_map.get(status_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

            created_raw = invoice.get("Created")
            created_date = (
                datetime.strptime(created_raw, "%Y%m%d%H%M%S").strftime("%d.%m.%Y %H:%M")
                if created_raw
                else "‚Äî"
            )

            amount = invoice.get("Amount", "‚Äî")
            currency = "BYN"

            text = (
                f"üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞\n\n"
                f"–ù–æ–º–µ—Ä: {account_no}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–°—É–º–º–∞: {amount} {currency}\n"
                f"–î–∞—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {created_date}"
            )
        else:
            text = f"‚ö†Ô∏è –°—á—ë—Ç —Å –Ω–æ–º–µ—Ä–æ–º {account_no} –Ω–µ –Ω–∞–π–¥–µ–Ω."

        await update.message.reply_text(text)
        context.user_data["action"] = None

# === –û–ë–†–ê–ë–û–¢–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û–ü–õ–ê–¢–´ ===
async def expresspay_notify(request: web.Request):
    try:
        post_data = await request.post()
        data_raw = post_data.get("Data")
        signature = post_data.get("Signature")

        if not data_raw:
            return web.Response(status=400, text="Missing Data")

        data = json.loads(data_raw)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–µ–∫—Ä–µ—Ç
        if EXPRESSPAY_SECRET and signature:
            computed = hmac.new(
                EXPRESSPAY_SECRET.encode("utf-8"),
                msg=data_raw.encode("utf-8"),
                digestmod=hashlib.sha1,
            ).hexdigest().upper()

            if computed != signature:
                logger.warning("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return web.Response(status=400, text="Invalid signature")

        logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ: {data}")
        return web.Response(status=200, text="OK")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return web.Response(status=500, text="Error")

# === –ó–ê–ü–£–°–ö ===
def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"BOT_TOKEN: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"EXPRESSPAY_TOKEN: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if EXPRESSPAY_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"EXPRESSPAY_SECRET: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if EXPRESSPAY_SECRET else '‚ö†Ô∏è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"APP_URL: {APP_URL}")

    app = Application.builder().token(BOT_TOKEN).build()

    # Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ExpressPay
    web_app = web.Application()
    web_app.router.add_post("/expresspay_notify", expresspay_notify)

    # –ó–∞–ø—É—Å–∫ Telegram webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}",
        web_app=web_app,
    )

if __name__ == "__main__":
    main()
