import os
import logging
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# --------------------- –ù–ê–°–¢–†–û–ô–ö–ò ---------------------

BOT_TOKEN = os.getenv("BOT_TOKEN")  # Telegram —Ç–æ–∫–µ–Ω
API_TOKEN = os.getenv("EXPRESSPAY_TOKEN")  # ExpressPay —Ç–æ–∫–µ–Ω
APP_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç
BASE_URL = "https://api.express-pay.by/v1/invoices"

# -----------------------------------------------------

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_state = {}  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º


# --------------------- EXPRESSPAY ---------------------

def create_invoice(amount: float):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –≤ ExpressPay"""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AccountNo –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: DDMMYY + –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
    today = datetime.now().strftime("%d%m%y")
    order_number = 1  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Ö—Ä–∞–Ω–∏—Ç—å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å
    account_no = f"{today}{order_number:03d}"

    payload = {
        "AccountNo": account_no,
        "Amount": str(amount).replace('.', ','),
        "Currency": 933,
        "Info": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏",
    }

    # ‚úÖ –í–û–¢ –¢–ê–ö –ë–´–õ–û –í –†–ê–ë–û–ß–ï–ú –í–ê–†–ò–ê–ù–¢–ï ‚Äî —Ç–æ–∫–µ–Ω –≤ URL
    url = f"{BASE_URL}?token={API_TOKEN}"
    response = requests.post(url, json=payload)
    return response.status_code, response.text


def get_invoice_status(invoice_no: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—á—ë—Ç–∞"""
    url = f"{BASE_URL}/{invoice_no}/status?token={API_TOKEN}"
    response = requests.get(url)
    return response.status_code, response.text


# --------------------- TELEGRAM ---------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="create_invoice")],
        [InlineKeyboardButton("üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="check_status")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_invoice":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.50):")
        user_state[query.from_user.id] = "create_invoice"
    elif query.data == "check_status":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:")
        user_state[query.from_user.id] = "check_status"


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = user_state.get(user_id)

    if state == "create_invoice":
        try:
            amount = float(update.message.text.replace(',', '.'))
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        status_code, response_text = create_invoice(amount)
        if status_code in (200, 201):
            await update.message.reply_text(f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n{response_text}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.\n–ö–æ–¥: {status_code}\n–û—Ç–≤–µ—Ç: {response_text}")

    elif state == "check_status":
        try:
            invoice_no = int(update.message.text)
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞.")
            return

        status_code, response_text = get_invoice_status(invoice_no)
        if status_code == 200:
            await update.message.reply_text(f"üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞:\n{response_text}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n–ö–æ–¥: {status_code}\n–û—Ç–≤–µ—Ç: {response_text}")

    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


# --------------------- MAIN ---------------------

def main():
    if not BOT_TOKEN or not API_TOKEN:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ EXPRESSPAY_TOKEN")

# Render –º–æ–∂–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å RENDER_EXTERNAL_URL —á—É—Ç—å –ø–æ–∑–∂–µ, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º fallback
if not APP_URL:
    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL-–∑–∞–≥–ª—É—à–∫–∞.")
    APP_URL = "https://example.com"

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # Webhook –¥–ª—è Render
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8443)),
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}",
    )


if __name__ == "__main__":
    main()
