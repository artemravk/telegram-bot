import os
import hmac
import hashlib
import json
import asyncio
import logging
from datetime import datetime
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
EXPRESSPAY_TOKEN = os.environ.get("EXPRESSPAY_TOKEN")
EXPRESSPAY_SECRET = os.environ.get("EXPRESSPAY_SECRET")
APP_URL = os.environ.get("APP_URL")

if not BOT_TOKEN or not EXPRESSPAY_TOKEN:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ EXPRESSPAY_TOKEN")

# === –°–¢–ê–†–¢ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="status")],
        [InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –ö–ù–û–ü–ö–ò ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "status":
        invoice_number = "123456"
        issue_date = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        text = f"üìÑ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: {invoice_number}\nüóì –î–∞—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {issue_date}"
        await query.edit_message_text(text)
    elif query.data == "help":
        await query.edit_message_text("‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞'.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if "—Å—á–µ—Ç" in text or "–∏–Ω–≤–æ–π—Å" in text:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞...")
    else:
        await update.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ '—Å—á—ë—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")

# === –í–ï–ë–•–£–ö EXPRESSPAY ===
async def expresspay_notify(request):
    try:
        body = await request.text()
        logger.info(f"üì© ExpressPay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {body}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        if EXPRESSPAY_SECRET:
            signature = request.headers.get("Signature", "")
            expected_sig = hmac.new(
                EXPRESSPAY_SECRET.encode(), body.encode(), hashlib.sha1
            ).hexdigest()
            if signature != expected_sig:
                logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ExpressPay")
                return web.Response(status=403, text="Invalid signature")

        data = json.loads(body)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ExpressPay –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {data}")
        return web.Response(status=200, text="OK")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ExpressPay —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return web.Response(status=500, text="Internal server error")

# === –í–ï–ë–•–£–ö TELEGRAM ===
async def telegram_webhook(request):
    try:
        data = await request.json()
        update = Update.de_json(data, request.app["bot"])

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–ø–¥–µ–π—Ç–∞
        app = request.app["application"]
        if not app._initialized:
            await app.initialize()

        await app.process_update(update)
        return web.Response(text="OK")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ telegram_webhook: {e}")
        return web.Response(status=500, text="Internal Server Error")

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
async def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"BOT_TOKEN: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"EXPRESSPAY_TOKEN: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if EXPRESSPAY_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"EXPRESSPAY_SECRET: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if EXPRESSPAY_SECRET else '‚ö†Ô∏è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"APP_URL: {APP_URL}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # === aiohttp —Å–µ—Ä–≤–µ—Ä ===
    web_app = web.Application()
    web_app["bot"] = application.bot
    web_app["application"] = application

    # –†–æ—É—Ç—ã
    web_app.router.add_post(f"/{BOT_TOKEN}", telegram_webhook)
    web_app.router.add_post("/expresspay_notify", expresspay_notify)

    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    # === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram ===
    if APP_URL:
        webhook_url = f"{APP_URL}/{BOT_TOKEN}"
        await application.bot.set_webhook(webhook_url)
        print(f"‚úÖ Webhook Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        print("‚ö†Ô∏è APP_URL –Ω–µ –∑–∞–¥–∞–Ω, Telegram webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
