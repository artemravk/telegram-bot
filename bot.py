import os
import logging
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# --------------------- –ù–ê–°–¢–†–û–ô–ö–ò ---------------------

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = os.getenv("EXPRESSPAY_TOKEN")  # –¢–æ–∫–µ–Ω ExpressPay
APP_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç URL

BASE_URL = "https://api.express-pay.by/v1"

# -----------------------------------------------------

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è AccountNo
order_counter = 1
invoice_temp_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º


# --------------------- –§–£–ù–ö–¶–ò–ò EXPRESSPAY ---------------------

def create_invoice(amount: float):
    """–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞"""
    global order_counter
    account_no = datetime.now().strftime("%d%m%y") + str(order_counter).zfill(3)
    order_counter += 1

    payload = {
        "AccountNo": account_no,
        "Amount": str(amount).replace('.', ','),
        "Currency": 933,
        "Info": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
    }

    url = f"{BASE_URL}/invoices?token={API_TOKEN}"
    response = requests.post(url, json=payload)
    return response.status_code, response.text


def get_invoice_status(invoice_no: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—á—ë—Ç–∞"""
    url = f"{BASE_URL}/invoices/{invoice_no}/status?token={API_TOKEN}"
    response = requests.get(url)
    return response.status_code, response.text


# --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="create_invoice")],
        [InlineKeyboardButton("üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞", callback_data="check_status")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "create_invoice":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.50):")
        context.user_data["action"] = "create_invoice"

    elif query.data == "check_status":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:")
        context.user_data["action"] = "check_status"


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = context.user_data.get("action")

    if action == "create_invoice":
        try:
            amount = float(update.message.text.replace(',', '.'))
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 25.50")
            return

        status_code, response_text = create_invoice(amount)
        if status_code == 200 or status_code == 201:
            await update.message.reply_text(f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!\n–û—Ç–≤–µ—Ç: {response_text}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞.\n–ö–æ–¥: {status_code}\n–¢–µ–∫—Å—Ç: {response_text}")

    elif action == "check_status":
        try:
            invoice_no = int(update.message.text)
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞.")
            return

        status_code, response_text = get_invoice_status(invoice_no)
        if status_code == 200:
            await update.message.reply_text(f"üìÑ –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞:\n{response_text}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.\n–ö–æ–¥: {status_code}\n–¢–µ–∫—Å—Ç: {response_text}")

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ /start.")


# --------------------- MAIN ---------------------

def main():
    if not BOT_TOKEN or not API_TOKEN or not APP_URL:
        raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN, EXPRESSPAY_TOKEN –∏ RENDER_EXTERNAL_URL")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # –î–ª—è Render ‚Äî webhook –≤–º–µ—Å—Ç–æ polling
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8443)),
        url_path=BOT_TOKEN,
        webhook_url=f"{APP_URL}/{BOT_TOKEN}",
    )


if __name__ == "__main__":
    main()
